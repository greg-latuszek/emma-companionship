// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base model with common fields
model BaseEntity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("base_entities")
}

// Member model - Core entity for companionship members
model Member {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  phone     String?
  birthDate DateTime? @map("birth_date")
  
  // Geographic location
  city      String?
  region    String?
  country   String   @default("Unknown")
  
  // Membership information
  membershipType String @map("membership_type") // 'regular', 'priest', 'consecrated_sister'
  status         String @default("active") // 'active', 'inactive', 'pending'
  joinedAt       DateTime @map("joined_at") @default(now())
  
  // Audit fields
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relations
  companionships     Companionship[] @relation("CompanionMember")
  accompaniedBy      Companionship[] @relation("AccompaniedMember")
  
  @@map("members")
}

// Companionship model - Represents relationship between members
model Companionship {
  id          String   @id @default(cuid())
  
  // Member relationships
  companionId     String @map("companion_id")
  accompaniedId   String @map("accompanied_id")
  
  // Relationship details
  status          String   @default("active") // 'active', 'inactive', 'pending'
  startDate       DateTime @map("start_date")
  endDate         DateTime? @map("end_date")
  relationshipType String  @map("relationship_type") @default("companionship")
  
  // Additional context
  notes           String?
  
  // Audit fields
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  companion       Member @relation("CompanionMember", fields: [companionId], references: [id])
  accompanied     Member @relation("AccompaniedMember", fields: [accompaniedId], references: [id])
  
  @@unique([companionId, accompaniedId])
  @@map("companionships")
}

// Session model for NextAuth.js
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  
  @@map("sessions")
}

// Account model for NextAuth.js
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// User model for NextAuth.js (separate from Member for auth purposes)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  
  @@map("users")
}

// Verification token for NextAuth.js
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
