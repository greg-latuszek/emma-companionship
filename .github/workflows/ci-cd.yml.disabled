name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8.15.6'

jobs:
  # Job 1: Code Quality & Testing
  test:
    name: 'Test & Code Quality'
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: emma_companionship_test
          POSTGRES_USER: emma_user_test
          POSTGRES_PASSWORD: emma_password_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://emma_user_test:emma_password_test@localhost:5432/emma_companionship_test" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-secret-for-ci" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Run database migrations
        run: pnpm db:migrate

      - name: Lint code
        run: pnpm lint

      - name: Check code formatting
        run: pnpm format:check

      - name: Type check
        run: pnpm type-check

      - name: Run unit tests
        run: pnpm test
        env:
          DATABASE_URL: postgresql://emma_user_test:emma_password_test@localhost:5432/emma_companionship_test

      - name: Run integration tests
        run: pnpm test:integration
        env:
          DATABASE_URL: postgresql://emma_user_test:emma_password_test@localhost:5432/emma_companionship_test

      - name: Health check test
        run: |
          pnpm dev &
          APP_PID=$!
          sleep 10
          curl -f http://localhost:3000/api/health || exit 1
          kill $APP_PID
        env:
          DATABASE_URL: postgresql://emma_user_test:emma_password_test@localhost:5432/emma_companionship_test

  # Job 2: Build Application
  build:
    name: 'Build Application'
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: apps/web/.next/
          retention-days: 7

  # Job 3: Deploy to Preview (PR only)
  deploy-preview:
    name: 'Deploy Preview'
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Job 4: Deploy to Production
  deploy-production:
    name: 'Deploy Production'
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Production Health Check
        run: |
          # Wait for deployment to be available
          sleep 30
          # Health check will be performed against the deployed URL
          # This would need to be configured with the actual deployment URL
          echo "Production deployment completed"
        env:
          DEPLOYMENT_URL: ${{ steps.deploy.outputs.preview-url }}

  # Job 5: Notify Deployment Status
  notify:
    name: 'Notify Status'
    runs-on: ubuntu-latest
    needs: [deploy-preview, deploy-production]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy-preview.result }}" == "success" ]] || [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment failed"
            exit 1
          fi
